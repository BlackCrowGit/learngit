Git命令总结:

创建版本库:
	初始化一个Git仓库,使用 git init 命令.
	添加文件到Git仓库,分两:
		第一步,使用命令 git add ,注意，可反复多次使用，添加多个文件;
		第二步,使用命令 git commit ,完成.

时光机穿梭:
	要随时掌握工作区的状态,使用 git status 命令.
	如果 git status 告诉你有文件被修改过,用 git diff 可以查看修改内容.
	
版本回退:
	HEAD指向的版本就是当前版本,因此,Git允许我们在版本的历史之间穿梭,使用命令 git reset --hard commit_id .
	穿梭前,用 git log 可以查看提交历史,以便确定要回退到哪个版本.
	要重返未来,用 git reflog 查看命令历史,以便确定要回到未来的哪个版本.
	
撤销修改:
	场景1:当你改乱了工作区某个文件的内容,想直接丢弃工作区的修改时,用命令 git checkout -- file .
	场景2:当你不但改乱了工作区某个文件的内容,还添加到了暂存区时,想丢弃修改,分两步,第一步用命令 git reset HEAD file ,就回到了场景1,第二步按场景1操作.
	场景3:已经提交了不合适的修改到版本库时,想要撤销本次提交,参考版本回退,不过前提是没有推送到远程库.
	
删除文件:
	命令 git rm 用于删除一个文件.如果一个文件已经被提交到版本库,那么你永远不用担心误删,但是要小心,你只能恢复文件到最新版本,你会丢失最近一次提交后你修改的内容.
	
远程仓库:
	第一步,创建 SSH Key :$ ssh-keygen -t rsa -C "youremail@example.com"
	你需要把邮件地址换成你自己的邮件地址,然后一路回车,使用默认值即可,由于这个Key也不是用于军事目的,所以也无需设置密码.
	在用户主目录里找到.ssh目录,里面有id_rsa和id_rsa.pub两个文件,这两个就是SSH Key的秘钥对,id_rsa是私钥,不能泄露出去,id_rsa.pub是公钥,可以放心地告诉任何人.
	第二步,登陆GitHub,打开"Account settings","SSH Keys"页面:然后,点"Add SSH Key",填上任意Title,在Key文本框里粘贴id_rsa.pub文件的内容,点"Add Key",就可以看到已经添加的Key.
	
添加远程库:
	首先,登陆GitHub,然后,在右上角找到"Create a new repo"按钮,创建一个新的仓库:
		在Repository name填入name,其他保持默认设置,点击"Create repository"按钮,就成功地创建了一个新的Git仓库.
	接下来,在本地的name仓库下运行命令:
		$ git remote add origin git@github.com:GitHubName/name.git
		添加后,远程库的名字就是origin,这是Git默认的叫法,也可以改成别的,但是origin这个名字一看就知道是远程库.
	下一步,就可以把本地库的所有内容推送到远程库上:
		$ git push -u origin master
		由于远程库是空的,我们第一次推送master分支时,加上了 -u 参数,Git不但会把本地的master分支内容推送的远程新的master分支,还会把本地的master分支和远程的master分支关联起来,在以后的推送或者拉取时就可以简化命令.
	此后,每次本地提交后,只要有必要,就可以使用命令 git push origin master 推送最新修改.
	
从远程库克隆:
	首先,登陆GitHub,创建一个新的仓库,名字叫gitskills:
		勾选Initialize this repository with a README,这样GitHub会自动为我们创建一个README.md文件.
	然后用命令 git clone 克隆一个本地库:
		$ git clone (库地址)
	
分支管理:
	Git鼓励大量使用分支：
	查看分支:git branch
	创建分支:it branch name
	切换分支:git checkout name
	创建+切换分支: git checkout -b name
	合并某分支到当前分支: git merge name
	删除分支: git branch -d name
		当Git无法自动合并分支时,就必须首先解决冲突.解决冲突后,再提交,合并完成.
		用 git log --graph 命令可以看到分支合并图.
		
分支策略:
	在实际开发中,我们应该按照几个基本原则进行分支管理:
	首先,master分支应该是非常稳定的,也就是仅用来发布新版本,平时不能在上面干活;
	那在哪干活呢?干活都在dev分支上,也就是说,dev分支是不稳定的,到某个时候,比如1.0版本发布时,再把dev分支合并到master上,在master分支发布1.0版本;
	你和你的小伙伴们每个人都在dev分支上干活,每个人都有自己的分支,时不时地往dev分支上合并就可以了.
	$ git merge --no-ff -m "merge with no-ff" dev
	
	开发一个新feature,最好新建一个分支;
	如果要丢弃一个没有被合并过的分支,可以通过 git branch -D name 强行删除.
	
多人协作的工作模式通常是这样:
	1.首先,可以试图用 git push origin branch-name 推送自己的修改;
	2.如果推送失败,则因为远程分支比你的本地更新,需要先用 git pull 试图合并;
	3.如果合并有冲突,则解决冲突,并在本地提交;
	4.没有冲突或者解决掉冲突后,再用 git push origin branch-name 推送就能成功!
	
	查看远程库信息，使用 git remote -v ；
	本地新建的分支如果不推送到远程,对其他人就是不可见的;
	从本地推送分支,使用 git push origin branch-name ,如果推送失败,先用git pull抓取远程的新提交;
	在本地创建和远程分支对应的分支,使用 git checkout -b branch-name  origin/branch-name,本地和远程分支的名称最好一致;
	建立本地分支和远程分支的关联,使用 git branch --set-upstream branch-name origin/branch-name ;
	从远程抓取分支,使用 git pull ,如果有冲突，要先处理冲突.
	
创建标签:
	命令 git tag name 用于新建一个标签,默认为HEAD,也可以指定一个commit id;
	-a tagname -m "blablabla..." 可以指定标签信息;
	-s tagname -m "blablabla..." 可以用PGP签名标签;
	命令 git tag 可以查看所有标签;
	命令 git push origin tagname 可以推送一个本地标签;
	命令 git push origin --tags 可以推送全部未推送过的本地标签;
	命令 git tag -d tagname 可以删除一个本地标签;
	命令 git push origin :refs/tags/tagname 可以删除一个远程标签.
	
忽略特殊文件:
	在Git工作区的根目录下创建一个特殊的.gitignore文件,然后把要忽略的文件名填进去,Git就会自动忽略这些文件.
	不需要从头写.gitignore文件,GitHub已经为我们准备了各种配置文件,只需要组合一下就可以使用了.
	所有配置文件可以直接在线浏览:https://github.com/github/gitignore
	忽略文件的原则是:
		1.忽略操作系统自动生成的文件，比如缩略图等；
		2.忽略编译生成的中间文件,可执行文件等,也就是如果一个文件是通过另一个文件自动生成的,那自动生成的文件就没必要放进版本库,比如Java编译产生的.class文件;
		3. 忽略你自己的带有敏感信息的配置文件,比如存放口令的配置文件.
		
配置别名:
	我们只需要敲一行命令,告诉Git,以后st就表示status:
		$ git config --global alias.st status
	用co表示checkout,ci表示commit,br表示branch:
		$ git config --global alias.co checkout
		$ git config --global alias.ci commit
		$ git config --global alias.br branch
	配置一个 git last ,让其显示最后一次提交信息:
		$ git config --global alias.last 'log -1'
	配置git lg:
		$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit"

111